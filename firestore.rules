
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      // UID for the admin user
      // CRITICAL: Ensure this UID ('DP9s4PczVeOYuzRX7bznXe0Q1x03')
      // EXACTLY matches the Firebase Authentication UID of your admin account.
      return request.auth.uid == 'DP9s4PczVeOYuzRX7bznXe0Q1x03';
    }

    // Rules for users collection
    match /users/{userId} {
      allow read: if isAdmin() || request.auth != null; // Admins can read all, any authenticated user can read (e.g., for profiles)
      allow create: if request.auth.uid == userId; // User can create their own profile
      allow update: if isAdmin() || request.auth.uid == userId; // User can update their own profile, admin can update any
      allow delete: if isAdmin(); // Only admin can delete user profiles
    }

    // Rules for departments and their nested subcollections
    match /departments/{departmentId} {
      allow read: if isAdmin() || request.auth != null; // Any authenticated user can read department structure
      allow write: if isAdmin(); // Only admin can create, update, delete departments

      match /years/{yearId} {
        allow read: if isAdmin() || request.auth != null;
        allow write: if isAdmin();

        match /specialities/{specialityId} {
          allow read: if isAdmin() || request.auth != null;
          allow write: if isAdmin();

          match /groups/{groupId} {
            allow read: if isAdmin() || request.auth != null;
            allow write: if isAdmin();

            // Schedule specific to a group
            // This path is for direct access, collectionGroup rule below handles broader queries
            match /schedule/{scheduleId} {
              allow read: if isAdmin() ||
                           request.auth.uid == resource.data.teacherId || // Teacher assigned to this slot
                           (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && // Student in this group
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Student' &&
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedGroupId == resource.data.groupId);
              allow write: if isAdmin(); // Admin can manage all schedules
            }
          }
        }
      }
    }

    // Rules for schedule sub-collections (used by collectionGroup queries)
    // This rule is crucial for allowing admins to perform collectionGroup queries on 'schedule'
    match /{path=**}/schedule/{scheduleDocId} {
      allow read: if isAdmin() || // Admin can read all schedule docs via collectionGroup query
                   request.auth.uid == resource.data.teacherId || // Teacher can read their assigned slots
                   (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && // Student can read their group's schedule
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Student' &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedGroupId == resource.data.groupId);
      // Note: Write rule for schedule is defined under the full path to ensure admin context for writes.
      // If admins need to write via collectionGroup (unlikely for this app structure), a similar write rule would be needed here.
    }

    // Rules for attendances collection
    match /attendances/{attendanceId} {
      allow read: if isAdmin() ||
                     request.auth.uid == resource.data.teacherId || // Teacher can read attendance for classes they took
                     request.auth.uid == resource.data.studentId; // Student can read their own attendance
      allow create, update: if isAdmin() || request.auth.uid == resource.data.teacherId; // Teacher can record/update attendance for their classes
      allow delete: if isAdmin(); // Only admin can delete attendance records
    }
  }
}
