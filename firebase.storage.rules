
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Allow read access to all files by default (e.g., for profile pictures if any)
    // match /{allPaths=**} {
    //   allow read: if true; 
    // }

    // Attendance Justification Images
    // - Only authenticated users (teachers) can upload.
    // - File size limit (e.g., 5MB).
    // - Only image types.
    // - Reading allowed by the student involved, the teacher who uploaded, or an admin.
    match /attendance_justifications/{classInstanceId}/{studentId}/{timestamp}_{fileName} {
      allow read: if request.auth != null && 
                     (studentId == request.auth.uid || 
                      exists(/databases/(default)/documents/attendances/$(classInstanceId + '_' + studentId)) && 
                      get(/databases/(default)/documents/attendances/$(classInstanceId + '_' + studentId)).data.teacherId == request.auth.uid ||
                      get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'Admin'); // Assuming admin role check
      allow write: if request.auth != null && 
                      request.resource.size < 5 * 1024 * 1024 &&
                      request.resource.contentType.matches('image/.*');
                      // Further validation that request.auth.uid is a teacher for this classInstanceId
                      // can be complex here, often handled by backend functions or security through obscurity.
                      // For now, relies on app logic to ensure only correct teacher uploads.
    }

    // Fallback: Disallow all other writes by default for security.
    match /{allPaths=**} {
      allow write: if false;
      // You might want to allow reads more broadly or keep them restricted by default
      allow read: if request.auth != null; // Example: only authenticated users can read other paths
    }
  }
}
