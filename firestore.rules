
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      // UID for the admin user
      return request.auth.uid == 'DP9s4PczVeOYuzRX7bznXe0Q1x03';
    }

    // Rules for users collection
    match /users/{userId} {
      // Allow create by anyone (for sign-up)
      allow create: if request.auth.uid == userId; 
      // Allow read by admin or the authenticated user themselves
      allow read: if isAdmin() || request.auth.uid == userId || request.auth != null; // Added request.auth != null for broader authenticated read for now
      // Allow update by admin or the user themselves (e.g., for profile updates)
      allow update: if isAdmin() || request.auth.uid == userId;
      // Disallow delete by anyone for now to prevent accidental data loss
      allow delete: if isAdmin(); // Only admin can delete user accounts
    }

    // Rules for departments and their subcollections
    match /departments/{departmentId} {
      allow read: if isAdmin() || request.auth != null; // Allow any authenticated user to read departments
      allow write: if isAdmin(); // Only admin can create, update, delete departments

      match /years/{yearId} {
        allow read: if isAdmin() || request.auth != null;
        allow write: if isAdmin();

        match /specialities/{specialityId} {
          allow read: if isAdmin() || request.auth != null;
          allow write: if isAdmin();

          match /groups/{groupId} {
            allow read: if isAdmin() || request.auth != null;
            allow write: if isAdmin();

            // Schedule specific to a group
            match /schedule/{scheduleId} {
                // Handled by the collection group rule below for broader query access,
                // but specific path writes can be more granular if needed.
                // For now, relying on collection group for reads and admin for writes.
                allow read: if isAdmin() || 
                             request.auth.uid == resource.data.teacherId ||
                             (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Student' &&
                             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedGroupId == resource.data.groupId);
                allow write: if isAdmin(); // Only admin can manage schedule templates directly here
            }
          }
        }
      }
    }
    
    // Rules for 'attendances' collection
    match /attendances/{attendanceId} {
        // Teacher can create/update attendance for classes they teach. 
        // Student can read their own attendance. Admin can read/write all.
        allow read: if isAdmin() || 
                       request.auth.uid == resource.data.teacherId || // Teacher can read records they created
                       request.auth.uid == resource.data.studentId;  // Student can read their own records
        
        allow create, update: if isAdmin() || 
                                 (request.auth.uid == resource.data.teacherId && 
                                  request.resource.data.teacherId == request.auth.uid); // Teacher can create/update if they are the teacher in the record
                                  
        allow delete: if isAdmin(); // Only admin can delete attendance records
    }


    // Rules for schedule sub-collections (used by collectionGroup queries)
    match /{path=**}/schedule/{scheduleDocId} {
      allow read: if isAdmin() || // Admin can read all schedule docs
                   request.auth.uid == resource.data.teacherId || // Teacher can read their assigned slots
                   (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && // Student can read their group's schedule
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Student' &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedGroupId == resource.data.groupId);
      allow write: if isAdmin(); // Admin can write/update any schedule doc
    }
  }
}
